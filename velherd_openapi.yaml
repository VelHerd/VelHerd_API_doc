openapi: 3.0.0
info:
  title: VelHerd - API documentation
  description: You can use VelHerd API if you have account on VelHerd web site.
  version: 1.0.0
servers:
  - url: http://{{baseurl}}
tags:
  - name: Reference
  - name: Reference > Introduction
    description: "## General info\n\nYou can use VelHerd API if you have account on VelHerd web site.\n\nVelHerd API is HTTP JSON API. That means all requests and responses are sent via HTTP protocol (secured with SSL). All data in requests and responses present in HTTP Body in [JSON](http://en.wikipedia.org/wiki/JSON) format.\n\nVelHerd API is based on [REST](http://en.wikipedia.org/wiki/Representational_state_transfer) principles. You have to be authenticated and call the simple HTTPs request on the URLs specified below. The following documentation covers core resources that are used to manipulate the main entities. First of all, read basic instructions to start using the API.\n\n## Very basics of HTTP REST concepts\n\n### Allowed HTTPs request typesemail\n\n- `GET` — Get a resource or list of resources\n    \n- `POST` — To create or update resource\n    \n- `PUT` — To create or update resource\n    \n- `DELETE` — To delete resource\n    \n\n### Usual [HTTP response codes](http://en.wikipedia.org/wiki/List_of_HTTP_status_codes)\n\n- `200 OK` — the request was successful.\n    \n- `201 Created` — the request was successful and a resource was created.\n    \n- `204 No Content` — the request was successful but there is no representation to return (i.e. the response is empty).\n    \n- `400 Bad Request` — the request could not be understood or was missing required parameters.\n    \n- `401 Unauthorized` — authentication failed or user doesn't have permissions for requested operation.\n    \n- `403 Forbidden` — access denied.\n    \n- `404 Not Found` — resource was not found.\n    \n- `422 Unprocessable Entity` - the request was well-formed but was unable to be followed due to semantic errors.\n    \n- `503 Service Unavailable` — service is temporary unavailable (e.g. scheduled Platform Maintenance). Try again later.\n    \n\n### Methods\n\n- `Resources collection` => `GET` {{baseUrl}}/api/{{apiVersion}}/OBJECTS — get list of objects.\n    \n- `Ids` => `GET` [{{baseUrl}}/api/{{apiVersion}}](https://velherd.com/api/v1/OBJECTS)[/OBJECTS/ids](https://velherd.com/api/v1/OBJECTS/ids) — get list of ids for all objects.\n    \n- `Single Resource` => `GET` [{{baseUrl}}/api/{{apiVersion}}](https://velherd.com/api/v1/OBJECTS)[/OBJECT/ID](https://velherd.com/api/v1/OBJECT/ID) — get one object by ID.\n    \n- `Create Resource` => `POST` [{{baseUrl}}/api/{{apiVersion}}](https://velherd.com/api/v1/OBJECTS)[/OBJECTS](https://operations.cropwise.com/api/v3/OBJECTS) — create new object.\n    \n- `Update Resource` => `PUT/PATCH` [{{baseUrl}}/api/{{apiVersion}}](https://velherd.com/api/v1/OBJECTS)[/OBJECTS/ID](https://operations.cropwise.com/api/v3/OBJECTS/ID) — update object by ID.\n    \n- `Delete Resource` => `DELETE` [{{baseUrl}}/api/{{apiVersion}}](https://velherd.com/api/v1/OBJECTS)[/OBJECTS/ID](https://operations.cropwise.com/api/v3/OBJECTS/ID) — delete object by ID.\n    \n\n### Useful tools\n\n- Postman ([https://www.getpostman.com](https://www.getpostman.com/)) — multi-platform REST client for API testing.\n    \n- Paw ([https://paw.cloud](https://paw.cloud/)) — beautiful (but MacOS only) REST client.\n    \n- ApiDog ([https://apidog.com](https://apidog.com/)) — a real design-first API development platform.\n    \n\n# Important notice! — read before start using API\n\n1. You should add HTTP Header\_`Content-Type: application/json`\_for all\_`POST`\_and\_`PUT`\_requests. Else, request would be dropped.\n    \n2. VelHerd API works only via HTTPS (SSL).\_**Important!**\_— check that you use\_`https://`\_in all requests (especially in Authorization request).\n    \n3. In case of wrong request or data, API gives you response with HTTP Error Code and detailed error description (if available). Please read it carefully.\n    \n4. Naming convention for OBJECT in requests: you need to use plural object name in\_`snake_case`:\n    \n\n- [{{baseUrl}}/api/{{apiVersion}}](https://velherd.com/api/v1/OBJECTS)`/animals`\n    \n- [{{baseUrl}}/api/{{apiVersion}}](https://velherd.com/api/v1/OBJECTS)`/company_units`"
  - name: Reference > Authentication
    description: >-
      The user should obtain a USER_API_TOKEN token that is required for all
      subsequent requests. USER_API_TOKEN is a string, that should be used to
      generate a JSON Web Token (JWT).


      You can generate USER_API_TOKEN on the user settings page
      (http://{{baseUrl}}/users/ID/edit_user) in the VelHerd system.


      <img
      src="https://content.pstmn.io/0c53717c-e0a0-4026-a521-35c3efe19187/MS5wbmc="
      alt=""><img
      src="https://content.pstmn.io/5e113891-4c01-4820-9c37-40eb78898adb/0JfQvdGW0LzQvtC6INC10LrRgNCw0L3QsCAyMDI1LTA2LTE5INC+IDA0LjQ0LjU1LnBuZw=="
      alt="">


      When you generate a token, you must copy it and save it for future use.


      <img
      src="https://content.pstmn.io/4ef2527e-af04-48d2-97cd-3145245859d0/Mi5wbmc="
      alt="">


      After generating USER_API_TOKEN you can use it to generate a JWT.
  - name: Reference > Authorization
    description: >-
      For authorization, you must generate a JWT. Send a request to
      {{baseUrl}}/api/access_tokens with USER_API_TOKEN in body.


      `{"integration_token": {"token": "`USER_API_TOKEN`"}}`


      In response, you will have a JWT (access_token) that is available for some
      time (expires_in).


      ``` json

      {
          "access_token": 
      "eyJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoxLCJjb21wYW55X2lkIjoyLCJleHAiOjE3NTAyNDk2NzZ9.b3uTIBUYOEHwVFmVkrbWOAXRX9u-0osG0fBPVqU0Q1A", 
          "expires_time": 7200,
          "expires_in": "2025-06-18T15:27:56.000+03:00"
      }

       ```

      After generating a JWT (access_token), you can use it in your request. In
      the header, you must have `Authorization` or `X-Authorization` with value
      `Bearer access_token`


      `Authorization: Bearer
      eyJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoxLCJjb21wYW55X2lkIjoyLCJleHAiOjE3NTAyNDk2NzZ9.b3uTIBUYOEHwVFmVkrbWOAXRX9u-0osG0fBPVqU0Q1A`
paths:
  /api/access_tokens:
    post:
      tags:
        - Reference > Authorization
      summary: JWToken
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                integration_token:
                  token: '{{userApiToken}}'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
